---
title: "Functionnal trait-based analysis"
author: "Louis Trousse"
format: html
editor: visual
bibliography: references.bib
---

# Description

The purpose of this work is to perform a functional analysis on a dataset containing information about the abundances of different species classified into groups based on their functional traits. This analysis is useful for comparing the functional identity of communities within one locality or another grouping factor, especially when facing a specific condition (e.g., over time, before/after a specific event, during a specific treatment, etc.).

This analysis is based on the work of Gomez Gras *et al.* [@gómez-gras2021] which focuses on the changes in the functional identity of coralligenous assemblages in response to marine heatwaves. The approach used is also based on the work of Teixido et al. [@teixidó2018] on the characterization of functional biodiversity loss along natural CO~2~ gradients. Please cite these authors if you use this work. This work reproduces and improves upon the script provided by Gomez-Gras *et al.* [@gómez-gras2021] and Teixido *et al.* [@teixidó2018], making it easier to use and more flexible. While all treatments are similar to those performed by the authors, they are implemented here with functions to facilitate reproduction with different datasets. The details of the functions are hidden in the principal script for readability, but all details can be found within the function script itself.

# 1. Principles and prerequisites

## 1.1. Scripts

To conduct this functional trait-based analyis, two script containing some functions are needed :

1.  "***quality_funct_space***" coded by Eva Maire & Sébastien Villéger (sebastien.villeger\@cnrs.fr) is an update from [@maire2015]. It computes the quality (i.e. mean squared-deviation between initial functional distance and standardized distance in the functional space) for the best functional dendrogram and all the multidimensional functional spaces from 2 to N dimensions (N selected by the user).

2.  "***functionalanalysis***" is the main script containing all functions to compute the analysis conducted by Gomez Gras *et al*. [@gómez-gras2021] .

One additional script is provided : "***SCRIPT_functional_analysis"***, it is not mandatory but serves as a good base for running this analysis easily or in a "routine" manner. Following document describe what do this script. For the script to work properly, it must be in the same folder as the data file and the ones containing the functions.

## 1.2. Datasets

Three datasets are necessary for the script to function correctly:

-   **Abundance_data**: Contains results of species abundances.
-   **Functional_Entities**: Contains detailled information on functional traits.
-   **Sample_metadata**: Contains metadata for the samples, including at least three pieces of information: Quadrat, Site, and Year (or equivalent).

Please note that in the provided script, all datasets are in .csv format. Feel free to change the extension to your preferred format, as long as the dataset maintains the same structure as the one previously shown. Ensure to change the script accordingly.

The following part describe how work this analysis and use as example datasets provided by Gomez Gras *et al.* [@gómez-gras2021]. Datasets can be changed as long as they maintain the same structure. Here we review the construction of these datasets one by one.

### ***1.2.1. Functional_Entities*** **:** Organisms classification into functional entities

This dataset contains information about the classification of organisms into Functional Entities (FE). This classification creates a unique code for each set of functional characteristics or traits. This code, called FE (Functional Entities), represents a group of species possessing an identical combination of categorized/ranked trait values. It is organised as follow :

| FE    | Species | Trait_1 | Trait_2 | Trait_3 | Trait_4 | Trait_5 |
|-------|---------|---------|---------|---------|---------|---------|
| a1bb1 | Sp_1    | a       | 1       | b       | b       | 1       |
| b3aa2 | Sp_2    | b       | 3       | a       | a       | 2       |
| a2ba1 | Sp_3    | a       | 2       | b       | a       | 1       |
| a1bb1 | Sp_4    | a       | 1       | b       | b       | 1       |

The column **Species** contains your species list or any other taxa unit, with one entry per taxa. Each **Trait\_** column contains a set of letters or integers that describe possible combinations for one functional trait. Letters are used to describe nominal traits and integers are used to describe quantitative or ranked traits. The combination of all trait values for one species constitute its **FE** code. Note that more than one species can have the same FE code even from different groups. The script provided in this work can be used with any species and traits as needed for your purposes. To work properly, don't change the titles of FE and Species columns

For example, in the data provided by Gomez Gras *et al.* [@gómez-gras2021], FE is a combination of the values associated with the following 12 functional traits:

|                            |                                                                                                                                                                                                                                       |
|-------------------------|-----------------------------------------------|
| **Morphology**             | \(a\) Boring, (b) Encrusting, (c) Filaments, (d) Stolonial (e) Foliose Erect, (f) Articulated, (g) Corymbose, (h) Cup-like, (i) Mass.-Encr., (j) Mass.-Erect (k) Mass. Hem. (l), Tree-like                                            |
| **Growth.rate**            | \(1\) Extreme slow (\< 1cm\* year^-1^), (2) Slow (\~ 1 cm \* year ^-1^), (3) Moderate (1–5 cm \* year ^-1^), (4) High (5–10 cm \* year ^-1^), (5) Very High (\> 10 cm \* year ^-1^)                                                   |
| **Solitary.colonial**      | \(1\) Solitary, (2) Colonial/Gregarious                                                                                                                                                                                               |
| **Maximum.longevity**      | \(1\) Very low (weeks), (2) Low (months; \< 12), (3) Medium (1–3 years), (4) High (3–20 years), (5) Very High (\>20 years)                                                                                                            |
| **Height (max)**           | \(1\) Very low (\< 1 cm / 1cm), (2) Low (2–5 cm), (3) Medium (5–20 cm), (4) High (20–50 cm), (5) Very High (\>50 cm)                                                                                                                  |
| **Width (max)**            | \(1\) Very low (\< 1 cm / 1cm), (2) Low (2–5 cm), (3) Medium (5–20 cm), (4) High (20–50 cm), (5) Very High (\>50 cm)                                                                                                                  |
| **Epibiosis :**            | \(1\) Never, (2) Facultative, (3) Obligate                                                                                                                                                                                            |
| **Energetic.ressources**   | \(1\) Autotroph, (2) Auto-heterotroph, (3) Heterotroph                                                                                                                                                                                |
| **Photosynthetic_pigment** | \(a\) None, (b) Chl a/b (e.g. green algae), (c) Chl a/c, Fucoxanthin, (e.g. brown algae), (d) Chl a, Phycocyanin, Phycoerythrin (e.g. red algae), (e) Chl a, Phycocy-anin (Cyanobacteria), (f) Dinoflagellathed, (g) Mix. (e.g. turf) |
| **Feeding**                | \(a\) Primary producer, (b) Active filter feeder w. cilia, (c) Active filter feeder by pumping, (d) Passive filter feeder, (e) Mixture, (f) Saprophytic                                                                               |
| **Age.at.reproduction**    | \(1\) Very low (weeks), (2) Low (months; \< 12), (3) Moderate (1–5 years), (4) High (\> 5 years)                                                                                                                                      |
| **Physicial.defences**     | \(a\) Non-calcifier, (b) Non-calc. spicules, (c) Calc. spicules and sclerites, (d) Carbonate w. discontinuities, (f) Continuous Carbonate, (g) Mixture                                                                                |

: For each species trait values were selected as the most accurate average description of species-specific traits. As some species show plasticity in the expression of certain traits and we were interested in global comparisons across species rather than on intraspecific variation, a fuzzy coding procedure based on coarse ranked and nominal categories was applied (Cheven *et al.,* 1994).

To ensure the proper functioning of the analysis, be aware of the importance of certain characters in R. For example, don't use special characters like "/", "", "(", or ")" in your column names or taxa names. Prefer using "\_" or "." instead.

### ***1.2.2. Sample_metadata*** **: sampling unit information**

This dataset contains informations about the sample design used. It is composed of at least three columns as follows (values are given as examples):

| Quadrat                      | Site   | Condition   |
|------------------------------|--------|-------------|
| Condition_1_Quadrat_Site_1_1 | Site_1 | Condition_1 |
| Condition_1_Quadrat_Site_1_2 | Site_1 | Condition_1 |
| Condition_1_Quadrat_Site_2_1 | Site_2 | Condition_1 |
| Condition_1_Quadrat_Site_2_2 | Site_2 | Condition_1 |
| Condition_2_Quadrat_Site_1_1 | Site_1 | Condition_2 |
| Condition_2_Quadrat_Site_1_2 | Site_1 | Condition_2 |

The **Quadrat** column contains the smallest sampling unit used for sampling communities. The **Site** column contains the unit in which comparison is desired; it can be any other grouping factor. However, for both this column and the previous one, the names Quadrat and Site must be kept in order for the functions to run correctly. The last column, "**Condition**" can be replaced by any condition you may need. It represents the condition for which you want to compare your data. You can also add any other columns to this dataset to fulfill your purpose and accommodate any additional treatments you may require.

### **1.2.3. Abundance_data : Matrix of abundances of the different taxa**

This dataset contains the results of quadrat or photoquadrat characterization. It is a matrice of abundances of the different taxa of interest. This community characterization dataset has the following structure : first column contains the sampling names (which should match those in the **Quadrat** column of the previous dataset); columns represent identified taxandefined. Values are the abundances of each taxa in the corresponding sample unit (i.e. quadrat). This dataset should have the following shape :

|                              | Sp_1 | Sp_2 | Sp_3 | Sp_4 |
|------------------------------|------|------|------|------|
| Condition_1_Quadrat_Site_1_1 |      |      |      |      |
| Condition_1_Quadrat_Site_1_2 |      |      |      |      |
| Condition_1_Quadrat_Site_2_1 |      |      |      |      |
| Condition_1_Quadrat_Site_2_2 |      |      |      |      |
| Condition_2_Quadrat_Site_1_1 |      |      |      |      |

Please note that the names of taxa should be the same as those presented in the **Functional_Entities** dataset.

## 1.3. Global principles of the analysis

This analysis contains different functions that allow you to explore functional trait distributions in a functional space.

-   Given a functional matrix, the first function called ***create_functional_space()***, computes the quality (i.e., mean squared deviation between the initial functional distance and the standardized distance in the functional space) for the best functional dendrogram and all multidimensional functional spaces from 2 to N dimensions (with N selected by the user). Based on the chosen functional space, the coordinates of all functional entities are retrieved. These coordinates, in a new coordinate system with reduced dimensions, can then be used to visualize your data along a choosen condition.

-   First, a function called ***frich_in_functional_space()*** computes the Frich (Functional Richness) index as the 4D convex hull volume of the multidimensional trait space generated for an assemblage of a specific condition. A two-dimensional projection of this Frich, compared to the global functional space, is also computed and displayed.

-   Next, a function called ***space_traits()*** positions variables in the functional space. Numerical trait categories are represented as vectors, while nominal traits are represented as points in the space. The positioning of these traits helps to understand the placement of functional identities within the functional space.

-   Afterward, a function called ***traits_distribution()*** runs various analyses. It first computes the Functional Identity (FI) of an assemblage under a specific condition as the abundance-weighted centroid of the community in the multidimensional trait space[@mouillot2013]. It then plots this FI in the functional space alongside abundance and location information for each functional entity (FE). A nonparametric analysis of variance (PERMANOVA) is then used to test whether the observed FI values significantly differ between conditions within the same Site, compared to the null hypothesis that FI remains constant across conditions. Another graphical representation can also be displayed, showing the distribution of each trait's values within functional categories at a given site and condition. This helps to identify where shifts in the functional space occur when they happen.

-   Finally, a function called **f*unctional_clustering()*** performs a broader classification. This classification is based on Partition Around Medoids (PAM) and selects the optimal number of clusters using the average silhouette width criterion. This method allows for further reduction in the number of functional groups, enabling exploration of how many species are present in each group within our datasets. By doing so, if some functional groups are represented by only one or a few species, it indicates a lack of functional redundancy. The loss of species in these groups can be critical for ecosystem functioning, as there may not be other species to fulfill their vacant functional roles.

# 2. Installation guide

Before you begin, ensure you have the latest version of R and Rstudio (recommanded) installed on your machine. then, two solutions can be used to install and conduct this analysis on your datasets :

1.  Cloning the repository via Git

2.  Downloading the ZIP file directly from GitHub:

## 2.1. Option 1 : Cloning repository 

1.  Install Git (if not already installed on your machine), installation guide can be easily found on the web
2.  Open a terminal in R studio for example and run the following command \
    ***"git*** ***clone https://github.com/LouisTrousse/Functional_Analysis"***

## 2.2. Option 2 : Downloading ZIP from GitHub:

1.  If you are not there, go to the GitHub repository of this analysis *(LouisTrousse/Functional_Analysis (github.com))*
2.  Click the **"Code"** button
3.  Select to **"Download ZIP"**
4.  Extract the ZIP file to your desired location

# 3. Utilisation guide

## 3.1. Folder preparation

In the folder where you want to conduct this analysis, place your three datasets: **Abundance_data**, **Functional_Entities**, and **Sample_metadata**. The scripts and files should also be placed in the same folder. Ensure that you have the necessary scripts in your folder (**quality_funct_space** and **functionalanalysis**). Open your R and start scripting or use the script provided : **SCRIPT_functional_analysis.R.**

## 3.2. Working environment preparation

Set your working directory before starting any analysis using the **setwd()** command, and ensure you are in your analysis folder. If you are working in an R project (recommended), the working directory is already set to your project directory.

Once your working directory is set, use appropriate commands to load your datasets in your environment. At this step you can also filter your datasets if needed before running any analysis.

## 3.3. Create Functional Space

Use the ***create_functional_space()*** function to calculate the functional trait-based space based on your functional matrix.

It will compute the quality (i.e., mean squared deviation between the initial functional distance and the standardized distance in the functional space) for the best functional dendrogram and all multidimensional functional spaces from 2 to N dimensions. The lower the mean sqared deviation, the higher the quality of the functional space. A graphical output illustrating the quality of each functional space is also provided. Since the quality is displayed for each dimension, the function will prompt you to enter the number of dimensions to keep for further analysis. Please enter this number in your R console, keeping in mind that the space should represent a significant portion of your data while being small enough to limit computational time and resources. Four dimensions are usually a good compromise.

### 3.3.1. Principle

As precised by Gomez gras *et al*. [@gómez-gras2021] , based on Functional Entities and associated matrix of traits a Principal Coordinate analysis (PCoA) is conducted. It is based on a Gower Dissimilarity matrix because different type of traits are provided (nominal and numerical) and the Gower dissimilarity index allows for mixed types of data (see [@legendre2012]). The PCoA

a Principal Coordinate analysis (PCoA) based on a Gower dissimilarity matrix is performed to create a multidimentional trait spaces in which FEs of each assemblages and temporal point were positionned according to their differences in traits values.

This function take 6 arguments :

-   "mat_funct" : a species x functional traits matrix (NA are not allowed, at least 3 species and 3 traits). Traits could be of different types (e.g. numeric, ordinal, nominal)

-   "traits_weights" : a numeric vector (NA are not allowed) with weights for all traits in "mat_funct", Applied only with Gower's distance. Default is same weight for all traits

-   "nbdim" : maximum number of dimensions for multidimensional functional spaces. By default, nbdim=7. This number should be specify by user in function of his data. Final number of dimensions depends on the number of positive eigenvalues (after correction) obtained with PCoA

-   "metric" : metric to be used to compute functional distance, "Euclidean" or "Gower" (=default)

-   "dendro" : a logical value indicating whether the best functional dendrogram shoudl be looked for (default is TRUE) , Setting value to FALSE will save computation time, especially when working with \>100 species

-   "plot" : character string to set the name of the jpeg file for plots illustrating the quality of functional spaces (NA means no plot).

In order to verify the quality of space, the meanSD value need to be checked. A low meanSD means a high quality of the representation ( as mean squared deviation is the average squared difference between the estimated values in a specify space and the actual value in a multiple space.

This value have to be minimal, but a compromise should be made, beetween the number of dimension to use and this value, as an augmentation of the number of dimension increse computational time. As an example , the dimension at which meanSD \< 0.004 is a good "rule of thumb" . I the following code, 4 first dimensions are conserved, but this value maybe changed to fullfill your purpose.

In the code above, the variance explained by PCoA axes can be seen, the 4 first explain 75 % of the variance.

## Functional Richness (Frich) and functional identity (FI)

***Frich*** is calculated as the 4D convex hull volume of the multidimensional trait space generated for each assemblages (and temporal point)

To test if ***Frich*** is different between assemblages (and temporal point), A null model can be used. It allow to test whether the observed values of ***Frich*** significanthly differed from the null hypothesis that ***Frich*** remained constant between assemblages. To do so, a simulation of 9999 random assemblages for each factor : site and time point (while keeping the number of FEs constant over time on each site's pool) can be conducted. The observed values of ***Frich*** can then be compared with the simulated random ones using a bilateral test (alpha \> 0.05)

***FI -Functional identity-*** is a unic value. It is calculated as the abundance weighted centroid of the community in the multidimensional trait space. To do so the position of each FE in the trait space is weighted by it's abundance and then averaged in the total assemblage pool.

### Trends of functional richness (Frich)

In this part we will draw graphics that represent the functional richness under the differents conditions (i.e. locations and spaces for example) To do so, we need to follow following steps :

1.  Specify conditions

    this step allow to precise conditions (localization and date) to draw plot in function.

2.  Data Manipulation and arrangements\
    This step allows to create a dataframe called ab.conditions for abundances per conditions, which summarise abundances data for each condition.

3.  Calculate Total Richness

    Before calculating the relative richness, the calculation of the total Richness is necessary, this value is the number of species encountere

4.  Calculate convex hull

    111 Taxonomic units in total for calculating the relative richness, but ...

5.  Plotting convex hull in a reduce space

    Convex hull is the smallest convex polygon than can enclose all points of a set.

    To plot convex hull in an elegant way, the choice of color is important. To choose these color you are free to change the following code with any color of your choice disponible in R (see this link : <https://r-charts.com/colors/>). If you want to change colors just remember that you need as much colors as you have factors. In the following example ou have 15 factors, so you need 15 color specifications.

Once you colors specifyed, the real plotting steps can begin.

During the Frich calculation Site and Time specific values are calculated, they are number of species (NbSp) and number of FEs (NbFEs), relative percentages of each (NbSpP,NbFEsP), and the 4D convex hull volume (Frich (Vol4D)) for each condition (Site & Time). These information are present in the Fric ubset and be added to each plot

6.  the next step to represent changes over time of ***Frich*** is to test for difference of FI inside each site over time. To do so each FI value can be tested in front of the null hypothesis that the abundance-weighted centroid of the community remained constant across time. To do so a nonparametric analysis of variance PERMANOVA (permutational multivariate analysis of variance) can be conducted for each site with time as a fixed factor. Here i an example of this step for one site.

one other way to do same is :

### Abundance distribution of traits and fuctionnal identity (FI)

Changes in species abundances may change the functional identity (mean values of traits) of species communities (i.e., abundance-weighted average value for each trait. Abundance weightning is important because several reason :

-   **Reflects Actual Community Composition** : Abundance-weighting ensures that the traits of more common species have a greater influence on the calculated community-level trait values. This is important because more abundant species are likely to have a greater impact on ecosystem processes and functioning compared to rare species. Without abundance weighting, the influence of rare species might be overrepresented, leading to a skewed interpretation of community traits.

-   **Ecological significance :** Traits of abundant species are more likely to affect ecosystem functions such as productivity, nutrient cycling, and energy flow. By weighting traits by abundance, the analysis better captures the functional roles that species play in the ecosystem. For example, if a particular trait associated with resource use efficiency is prevalent in abundant species, it can indicate the overall resource use strategy of the community.

-   **Better inference of Ecosystem processes** : Abundance-weighted trait analysis can provide insights into how ecosystems might respond to environmental changes. For example, if certain traits become more common as the environment changes (e.g., due to climate change or habitat alteration), abundance-weighted traits can help predict shifts in ecosystem processes. This can be crucial for understanding and managing ecosystems under changing conditions.

-   **Enhances Comparability Across Studies :** Using abundance-weighted traits standardizes the way communities are compared, making it easier to relate findings across different studies and ecosystems. This comparability is important for synthesizing results and drawing broader ecological conclusions.

However, it also mitigates the noise from rare species which can be an advantage or not depending on context. Rare species can have unusual or extreme trait values that might disproportionately influence unweighted trait analysis. But, if these rare species have unique functional trait they are succeptible to have a great influence on the community depending on interaction with other species for example.
